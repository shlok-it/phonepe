{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface PhonepePlugin {\n  /**\n      * This method is used to initiate PhonePe Payment sdk.\n     * Provide all the information as requested by the method signature.\n     * Params:\n     *    - environment: This signified the environment required for the payment sdk\n     *      possible values: UAT, UAT_SIM, PRODUCTION\n     *      if any unknown value is provided, PRODUCTION will be considered as default.\n     *    - merchantId: The merchant id provided by PhonePe  at the time of onboarding.\n     *    - appId: The appId provided by PhonePe at the time of onboarding.\n     *    - enableLogging: If you want to enabled / visualize sdk log\n     *        - enabled = YES\n     *        - disable = NO\n     *\n     *    - Return: Boolean (TRUE -> SUCCESS).\n     *        - SUCCESS: TRUE\n     *        - FAILURE: FALSE\n     *            - in iOS = False (if AppID missing:-Please provide PhonePe AppId)\n     *            - in Android = Error in case of invalid arguments ex: \"Invalid environment or merchantId!\"\n     */\n  init(options: {\n    environment: string;\n    merchantId: string;\n    appId: string;\n    enableLogging: boolean | false;\n  }): Promise<Record<string, boolean>>;\n  /**\n   * This method is used to initiate PhonePe B2B PG Flow.\n   * Provide all the information as requested by the method signature.\n   * Params:\n   *    - body : The request body for the transaction as per the developer docs.\n   *      Make sure the request body is base64encoded\n   *    - checkSum: checksum for the particular transaction as per the developer docs.\n   *    - apiEndPoint: The API endpoint for the PG transaction.\n   *    - headers: Headers as per the developer doc, to accomodate Container flow\n   *    - packageName: @Optional(for iOS) in case of android if intent url is expected for specific app.\n   *    - callBackURL: Your custom URL Schemes, as per the developer docs.\n   * Return: Will be returning a dictionary / hashMap\n   *  {\n   *     status: String, // string value to provide the status of the transcation\n   *                     // possible values: SUCCESS, FAILURE, INTERUPTED\n   *     error: String   // if any error occurs\n   *  }\n   */\n  startPGTransaction(options: {\n    body: string;\n    checksum: string;\n    apiEndPoint: string;\n    headers: any;\n    packageName: string | null;\n    callBackURL: string | null;\n  }): Promise<Record<string, string>>;\n  /**\n    * This method is used to initiate PhonePe B2B PG Flow.\n    * Provide all the information as requested by the method signature.\n    * Params:\n    *    - body : The request body for the transaction as per the developer docs.\n    *      Make sure the request body is base64encoded.\n    *\n    *    - checkSum: checksum for the particular transaction as per the developer docs.\n    *    - apiEndPoint: The API endpoint for the container transaction.\n    *    - headers: Headers as per the developer doc, to accomodate Container flow\n    *    - callBackURL: Your custom URL Schemes, as per the developer docs.\n    * Return: Will be returning a dictionary / hashMap\n    *  {\n    *     status: String, // string value to provide the status of the transcation\n    *                     // possible values: SUCCESS, FAILURE, INTERUPTED\n    *     error: String   // if any error occurs\n    *  }\n    */\n  startContainerTransaction(options: {\n    body: string;\n    checksum: string;\n    apiEndPoint: string;\n    headers: any;\n    callBackURL: string | null;\n  }): Promise<Record<string, string>>;\n  /**\n   * This method is called to verify / check if PhonePe app is installed on the user / target device.\n   * Return: Boolean\n   *  YES -> PhonePe app installed/available\n   *  NO -> PhonePe app unavailable\n   *  NOTE :- In iOS, Add all the request Query URL Schema as per the developer doc.\n   */\n  isPhonePeInstalled(): Promise<Record<string, boolean>>;\n  /**\n   * This method is called to verify / check if Paytm app is installed on the user / target device.\n   * Return: Boolean\n   *  YES -> Paytm app installed/available\n   *  NO -> Paytm app unavailable\n   *  NOTE :- In iOS, Add all the request Query URL Schema as per the developer doc.\n   */\n  isPaytmInstalled(): Promise<Record<string, boolean>>;\n  /**\n   * This method is called to verify / check if GPay app is installed on the user / target device.\n   * Return: Boolean\n   *  YES -> GPay app installed/available\n   *  NO -> GPay app unavailable\n   *  NOTE :- In iOS, Add all the request Query URL Schema as per the developer doc.\n   */\n  isGpayInstalled(): Promise<Record<string, boolean>>;\n  /**\n    * This method is called to get package signature while creation of AppId in @Android only.\n    * Return: String\n    *  Non empty string -> app package signature\n    *  NOTE :- In iOS, it will throw os error at runtime.\n    */\n  getPackageSignatureForAndroid(): Promise<Record<string, string>>;\n  /**\n   * This method is called to get list of upi apps in @Android only.\n   * Return: String\n   *  JSON String -> List of UPI App with packageName, applicationName & versionCode\n   *  NOTE :- In iOS, it will throw os error at runtime.\n   */\n  getUpiAppsForAndroid(): Promise<Record<string, string>>;\n}"]}